{"version":3,"sources":["App.tsx","index.tsx"],"names":["temperatureWrapperStyle","textAlign","marginTop","temperatureStyle","fontFamily","fontSize","color","temperatureSignStyle","locationWrapperStyle","alignSelf","locationStyle","descriptionStyle","letterSpacing","temperatureUnitStyle","App","React","useState","showTemperature","setShowTemperature","actualTemperature","setActualTemperature","country","setCountry","city","setCity","description","setDescription","backgroundTransitionCoefficient","Math","tanh","backgroundStyle","backgroundColor","height","width","display","flexDirection","useEffect","a","fetchData","setTimeout","console","log","abs","style","sign","round","ReactDOM","render","document","getElementById"],"mappings":"2LAKMA,EAA0B,CAC9BC,UAAW,SACXC,UAAW,6BAGPC,EAAmB,CACvBC,WAAY,2BACZC,SAAU,QACVC,MAAO,SAGHC,EAAuB,CAC3BH,WAAY,2BACZC,SAAU,OACVC,MAAO,SAGHE,EAAuB,CAC3BC,UAAW,UAGPC,EAAgB,CACpBR,UAAW,OACXE,WAAY,aACZC,SAAU,OACVC,MAAO,SAGHK,EAAmB,CACvBL,MAAO,QACPF,WAAY,2BACZC,SAAU,OACVO,cAAe,QACfH,UAAW,UAGPI,EAAuB,CAC3BT,WAAY,2BACZC,SAAU,OACVC,MAAO,QACPG,UAAW,YAgEEK,EA7DO,WAAO,IAAD,EACoBC,IAAMC,SAAiB,GAD3C,mBACnBC,EADmB,KACFC,EADE,OAEwBH,IAAMC,WAF9B,mBAEnBG,EAFmB,KAEAC,EAFA,OAGIL,IAAMC,WAHV,mBAGnBK,EAHmB,KAGVC,EAHU,OAIFP,IAAMC,WAJJ,mBAInBO,EAJmB,KAIbC,EAJa,OAKYT,IAAMC,WALlB,mBAKnBS,EALmB,KAKNC,EALM,KAOpBC,EAAkCC,KAAKC,KAAK,IAAKZ,GAEjDa,EAAkB,CACtBC,gBAAgB,OAAD,OAAS,IAAwC,GAAlCJ,EAAf,YAAuD,KAAyC,GAAnCA,EAA7D,YAAsG,KAAyC,GAAnCA,EAA5G,KACfK,OAAQ,QACRC,MAAO,QACPC,QAAS,OACTC,cAAe,UA8BjB,OA3BAC,qBAAU,YACO,uCAAG,sBAAAC,EAAA,sDAEhBjB,GAAsB,IAItBE,EAAW,WACXE,EAAQ,UACRE,EAAe,aARC,2CAAH,qDAUfY,KACC,IAEHF,qBAAU,WACLjB,GAAqBA,GAAqBF,GAC3CsB,YAAW,WACLpB,GAAqB,GAAKF,EAAsC,IAApBE,EAA2BA,GAAuBA,EAAoB,GAAKF,EAAsC,IAApBE,EAA2BA,GACtKD,EAAmBC,GACnBqB,QAAQC,IAAIX,EAAgBC,kBAE5Bb,EAAmBD,EAAsC,IAApBE,KAEtCS,KAAKc,IAAIzB,MAEb,CAACE,EAAmBF,IAGnB,sBAAK0B,MAAOb,EAAZ,UACE,qBAAKa,MAAOnC,EAAZ,SACE,qBAAImC,MAAOjC,EAAX,UAA2Ba,EAA3B,KAAmCF,OAErC,qBAAKsB,MAAO3C,EAAZ,SACE,sBAAK2C,MAAO,CAAC,QAAW,OAAQ,eAAkB,SAAU,WAAc,UAA1E,UACE,oBAAIA,MAAOpC,EAAX,SAAgE,GAA9BqB,KAAKgB,KAAK3B,GAAwB,IAAM,MAC1E,oBAAI0B,MAAOxC,EAAX,SAA8ByB,KAAKc,IAAId,KAAKiB,MAAM5B,MAClD,oBAAI0B,MAAO9B,EAAX,wBAGJ,oBAAI8B,MAAOhC,EAAX,SAA8Bc,QCpGtCqB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.b2f56b39.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport {getWeatherData} from \"./services/weather\";\r\n\r\n\r\n\r\nconst temperatureWrapperStyle = {\r\n  textAlign: \"center\" as const,\r\n  marginTop: \"calc(50vh - 169px + 34px)\"\r\n}\r\n\r\nconst temperatureStyle = {\r\n  fontFamily: 'IBM Plex Mono, monospace',\r\n  fontSize: \"130px\",\r\n  color: \"black\"\r\n};\r\n\r\nconst temperatureSignStyle = {\r\n  fontFamily: 'IBM Plex Mono, monospace',\r\n  fontSize: \"80px\",\r\n  color: \"black\"\r\n}\r\n\r\nconst locationWrapperStyle = {\r\n  alignSelf: \"center\"\r\n}\r\n\r\nconst locationStyle = {\r\n  marginTop: \"10px\",\r\n  fontFamily: \"Montserrat\",\r\n  fontSize: \"20px\",\r\n  color: \"black\"\r\n}\r\n\r\nconst descriptionStyle = {\r\n  color: \"black\",\r\n  fontFamily: 'IBM Plex Mono, monospace',\r\n  fontSize: \"30px\",\r\n  letterSpacing: \"0.6px\",\r\n  alignSelf: \"center\"\r\n}\r\n\r\nconst temperatureUnitStyle = {\r\n  fontFamily: 'IBM Plex Mono, monospace',\r\n  fontSize: \"40px\",\r\n  color: \"black\",\r\n  alignSelf: \"baseline\"\r\n}\r\n\r\nconst App: React.FC = () => {\r\n  const [showTemperature, setShowTemperature] = React.useState<number>(0);\r\n  const [actualTemperature, setActualTemperature] = React.useState<number>();\r\n  const [country, setCountry] = React.useState<string>();\r\n  const [city, setCity] = React.useState<string>();\r\n  const [description, setDescription] = React.useState<string>();\r\n\r\n  const backgroundTransitionCoefficient = Math.tanh(0.05*showTemperature);\r\n\r\n  const backgroundStyle = {\r\n    backgroundColor: `rgb(${166 + backgroundTransitionCoefficient * 89},${170 + backgroundTransitionCoefficient * -61},${163 + backgroundTransitionCoefficient * -87})`,\r\n    height: \"100vh\",\r\n    width: \"100vw\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\" as const\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      //const weatherData = await getWeatherData();\r\n      setActualTemperature(-15);\r\n      //setCountry(weatherData.country);\r\n      //setCity(weatherData.region);\r\n      //setDescription(weatherData.weather_descriptions[0]);\r\n      setCountry('Germany');\r\n      setCity('Bayern');\r\n      setDescription('Clear sky');\r\n    }\r\n    fetchData();\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if(actualTemperature && actualTemperature != showTemperature) {\r\n      setTimeout(() => {\r\n        if((actualTemperature >= 0 && showTemperature + actualTemperature * 0.01 > actualTemperature) || (actualTemperature < 0 && showTemperature + actualTemperature * 0.01 < actualTemperature)) {\r\n          setShowTemperature(actualTemperature);\r\n          console.log(backgroundStyle.backgroundColor);\r\n        } else {\r\n          setShowTemperature(showTemperature + actualTemperature * 0.01);\r\n        }\r\n      }, Math.abs(showTemperature))\r\n    }\r\n  }, [actualTemperature, showTemperature]);\r\n\r\n  return (\r\n      <div style={backgroundStyle}>\r\n        <div style={locationWrapperStyle}>\r\n          <h2 style={locationStyle}>{city}, {country}</h2>\r\n        </div>\r\n        <div style={temperatureWrapperStyle}>\r\n          <div style={{\"display\": \"flex\", \"justifyContent\": \"center\", \"alignItems\": \"center\"}}>\r\n            <h3 style={temperatureSignStyle}>{Math.sign(showTemperature) == 1 ? '+' : '-'}</h3>\r\n            <h1 style={temperatureStyle}>{Math.abs(Math.round(showTemperature))}</h1>\r\n            <h3 style={temperatureUnitStyle}>Â°C</h3>\r\n          </div>\r\n        </div>\r\n        <h3 style={descriptionStyle}>{description}</h3>\r\n      </div>\r\n  )\r\n};\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}